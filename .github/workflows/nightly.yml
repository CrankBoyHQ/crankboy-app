name: Nightly Build

on:
    # Triggers the workflow at 00:00 UTC every day.
    schedule:
        - cron: "0 0 * * *"

    # Allows you to run this workflow manually from the Actions tab on GitHub.
    workflow_dispatch:

jobs:
    build_device:
        name: Create Nightly Device Build
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the repository's code and its submodules.
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  submodules: "recursive"
                  lfs: true

            # Step 2: Setup ARM GCC Toolchain from Submodule
            - name: Setup ARM GCC Toolchain from Submodule
              run: |
                  echo "Extracting toolchain from toolchain/linux/..."
                  tar -xjf toolchain/linux/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2
                  TOOLCHAIN_PATH="$GITHUB_WORKSPACE/gcc-arm-none-eabi-9-2019-q4-major/bin"
                  echo "Adding $TOOLCHAIN_PATH to the system PATH..."
                  echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH

            # Step 3: Setup Playdate SDK from Submodule and Verify Toolchain
            - name: Setup Playdate SDK from Submodule and Verify Toolchain
              run: |
                  echo "Verifying compiler version:"
                  arm-none-eabi-gcc --version
                  echo "Extracting Playdate SDK from toolchain/linux/..."
                  tar -xf toolchain/linux/PlaydateSDK-2.7.6.tar
                  SDK_DIR_NAME=$(ls -d PlaydateSDK-*/ | sed 's,/$,,')
                  echo "PLAYDATE_SDK_PATH=$GITHUB_WORKSPACE/$SDK_DIR_NAME" >> $GITHUB_ENV

            # Step 4: Update Version and Build Number in pdxinfo
            - name: Update Version and Build Number
              run: |
                  DATE_STAMP=$(date +'%Y%m%d')
                  CURRENT_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  NEW_VERSION="${CURRENT_VERSION}.${DATE_STAMP}"
                  echo "Updating version in Source/pdxinfo to $NEW_VERSION"
                  sed -i -e "s/^version=.*/version=$NEW_VERSION/" -e "s/^buildNumber=.*/buildNumber=$DATE_STAMP/" Source/pdxinfo
                  echo "Contents of pdxinfo after update:"
                  cat Source/pdxinfo

            # Step 5: Build the Project for Device
            - name: Build Project for Device
              run: make -j$(nproc) device

            # Step 6: Get Device Artifact Name
            - name: Get Device Artifact Name
              id: artifact_details
              run: |
                  APP_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  ARTIFACT_NAME="CrankBoy-Device-${APP_VERSION}-nightly"
                  echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

            # Step 7: Prepare Artifact for Upload
            - name: Prepare Artifact for Upload
              run: |
                  mkdir artifact_root
                  mv CrankBoy.pdx artifact_root/

            # Step 8: Upload the .pdx Directory
            - name: Upload Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifact_details.outputs.artifact_name }}
                  path: artifact_root/

    build_simulator_linux:
        name: Create Nightly Simulator Build (Linux)
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the repository's code and its submodules.
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  submodules: "recursive"
                  lfs: true

            # Step 2: Setup ARM GCC Toolchain from Submodule
            - name: Setup ARM GCC Toolchain from Submodule
              run: |
                  echo "Extracting toolchain from toolchain/linux/..."
                  tar -xjf toolchain/linux/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2
                  TOOLCHAIN_PATH="$GITHUB_WORKSPACE/gcc-arm-none-eabi-9-2019-q4-major/bin"
                  echo "Adding $TOOLCHAIN_PATH to the system PATH..."
                  echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH

            # Step 3: Setup Playdate SDK from Submodule and Verify Toolchain
            - name: Setup Playdate SDK from Submodule and Verify Toolchain
              run: |
                  echo "Verifying compiler version:"
                  arm-none-eabi-gcc --version
                  echo "Extracting Playdate SDK from toolchain/linux/..."
                  tar -xf toolchain/linux/PlaydateSDK-2.7.6.tar
                  SDK_DIR_NAME=$(ls -d PlaydateSDK-*/ | sed 's,/$,,')
                  echo "PLAYDATE_SDK_PATH=$GITHUB_WORKSPACE/$SDK_DIR_NAME" >> $GITHUB_ENV

            # Step 4: Update Version and Build Number in pdxinfo
            - name: Update Version and Build Number
              run: |
                  DATE_STAMP=$(date +'%Y%m%d')
                  CURRENT_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  NEW_VERSION="${CURRENT_VERSION}.${DATE_STAMP}"
                  echo "Updating version in Source/pdxinfo to $NEW_VERSION"
                  sed -i -e "s/^version=.*/version=$NEW_VERSION/" -e "s/^buildNumber=.*/buildNumber=$DATE_STAMP/" Source/pdxinfo
                  echo "Contents of pdxinfo after update:"
                  cat Source/pdxinfo

            # Step 5: Build a universal .pdx for both Device and Simulator
            - name: Build Universal Project (Device & Simulator)
              run: make -j$(nproc)

            # Step 6: Get Simulator Artifact Name
            - name: Get Simulator Artifact Name
              id: artifact_details
              run: |
                  APP_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  ARTIFACT_NAME="CrankBoy-Simulator-${APP_VERSION}-nightly-linux"
                  echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

            # Step 7: Prepare Artifact for Upload
            - name: Prepare Artifact for Upload
              run: |
                  mkdir artifact_root
                  mv CrankBoy.pdx artifact_root/

            # Step 8: Upload Simulator Artifact
            - name: Upload Simulator Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifact_details.outputs.artifact_name }}
                  path: artifact_root/

    build_simulator_macos:
        name: Create Nightly Simulator Build (macOS)
        runs-on: macos-latest

        steps:
            # Step 1: Check out the repository's code and its submodules.
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  submodules: "recursive"
                  lfs: true

            # Step 2: Unzip and Install Playdate SDK from Submodule
            - name: Unzip and Install Playdate SDK from Submodule
              run: |
                  echo "Unzipping SDK archive from toolchain/mac/..."
                  unzip toolchain/mac/PlaydateSDK-2.7.6.zip

                  PKG_PATH=$(find . -name "PlaydateSDK.pkg" -print -quit)
                  if [[ -z "$PKG_PATH" ]]; then
                      echo "PlaydateSDK.pkg not found after unzipping!"
                      exit 1
                  fi

                  echo "Installing $PKG_PATH..."
                  sudo installer -pkg "$PKG_PATH" -target /

                  echo "PLAYDATE_SDK_PATH=$HOME/Developer/PlaydateSDK" >> $GITHUB_ENV

            # Step 3: Update Version and Build Number
            - name: Update Version and Build Number
              run: |
                  DATE_STAMP=$(date +'%Y%m%d')
                  CURRENT_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  NEW_VERSION="${CURRENT_VERSION}.${DATE_STAMP}"
                  sed -i '' -e "s/^version=.*/version=$NEW_VERSION/" -e "s/^buildNumber=.*/buildNumber=$DATE_STAMP/" Source/pdxinfo

            # Step 4: Build Universal Project (Device & Simulator)
            - name: Build Universal Project (Device & Simulator)
              run: make -j$(sysctl -n hw.ncpu)

            # Step 5: Get Simulator Artifact Name
            - name: Get Simulator Artifact Name
              id: artifact_details
              run: |
                  APP_VERSION=$(grep '^version=' Source/pdxinfo | cut -d '=' -f 2)
                  ARTIFACT_NAME="CrankBoy-Simulator-${APP_VERSION}-nightly-macos"
                  echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

            # Step 6: Prepare Artifact for Upload
            - name: Prepare Artifact for Upload
              run: |
                  mkdir artifact_root
                  mv CrankBoy.pdx artifact_root/

            # Step 7: Upload Simulator Artifact
            - name: Upload Simulator Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.artifact_details.outputs.artifact_name }}
                  path: artifact_root/
